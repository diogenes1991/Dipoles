#procedure simplifySMEadvanced
**   multiply with PL + PR to the left of every rightmost spinor
    id G(n1?,v1?)*G(n1?)*QQ(?args) = G(n1,v1)*QQ(?args);
    id G5(n1?)*G(n1?)*QQ(?args) = G5(n1)*QQ(?args);
    id G(n1?,v1?)*QQ(?args) = G(n1,v1)*(PL(n1) + PR(n1))*QQ(?args);
    id G5(n1?)*QQ(?args) = G5(n1)*(PL(n1) + PR(n1))*QQ(?args);

    id G5(n1?)*PL(n1?) = -PL(n1);
    id G5(n1?)*PR(n1?) = PR(n1);

    b SCC;
    .sort
    i vspacer;
    f GG;
    s XX;
    cf f;

*   bring gammas with summation indices between the two spinor chains
*   to the right before the projector
#do l=1,3
    b QQ;
    .sort
    Keep Brackets;
    id QQ(?args, l) = QQ(?args);
    id QQ(?args, r) = QQ(?args);
    .sort
    #message SORT
*   multiply with PL + PR to the left of every rightmost spinor
    id G(n1?,v1?)*G(n1?)*QQ(?args) = G(n1,v1)*QQ(?args);
    id G5(n1?)*G(n1?)*QQ(?args) = G5(n1)*QQ(?args);
    id G(n1?,v1?)*QQ(?args) = G(n1,v1)*(PL(n1) + PR(n1))*QQ(?args);
    id G5(n1?)*QQ(?args) = G5(n1)*(PL(n1) + PR(n1))*QQ(?args);

    id G5(n1?)*PL(n1?) = -PL(n1);
    id G5(n1?)*PR(n1?) = PR(n1);

    #call collectSC;
    #do j = 0, 10
        id SCC(n1?, ?args, G(n1?, v1?), ?args2)*SCC(n2?, ?args3, G(n2?, v1?), ?args4) =
            indtag(`j',f(v1))*SCC(n1, ?args, GG(n1, v1), ?args2)*SCC(n2, ?args3, GG(n2, v1), ?args4) ;
    #enddo
    argument;
        id GG(n1?,v1?) = G(n1,v1);
    endargument;


    #do j = 0, 10
        repeat id indtag(`j',f(v1?))*SCC(n1?, ?args, G(n1?, v1?), G(n1?,v2?), ?args2) = 
            - XX*indtag(`j',f(v1))*SCC(n1, ?args, G(n1, v2), G(n1,v1), ?args2)
            + 2*XX*d_(v1,v2)*SCC(n1, ?args, G(n1), ?args2);
    #enddo

    repeat;
        id SCC(?args, G(n1?,v1?), G(n1?), ?args2) = SCC(?args, G(n1,v1), ?args2);
        id SCC(?args, G(n1?), G(n1?, v1?), ?args2) = SCC(?args, G(n1,v1), ?args2);
        id SCC(?args, G(n1?), PL(n1?), ?args2) = SCC(?args, PL(n1), ?args2);
        id SCC(?args, G(n1?), PR(n1?), ?args2) = SCC(?args, PR(n1), ?args2);
    endrepeat;
*   open and close SCCs
    b SCC,indtag, XX;
    .sort
    Keep Brackets;
    id indtag(?args) = 1;
    id XX = 1;

    b SCC;
    .sort
    Keep Brackets;
    id SCC(?args) = SC(?args);

    b SC;
    .sort
    Keep Brackets;
    repeat id once SC(n1?,n2?,?args) = n2*SC(n1,?args);
    
    id SC(n1?) = 1;
    b QQ;
    .sort
    Keep Brackets;
    id QQ(?args, l) = QQ(?args);
    id QQ(?args, r) = QQ(?args);
    .sort

    repeat id G(n1?)*G(n1?,v1?) = G(n1,v1)*G(n1);
    repeat id G(n1?)*G(n1?) = G(n1);
    id G(n1?,v1?)*G(n1?) = G(n1,v1);
    id PL(n1?)*G(n1?) = PL(n1);
    id PR(n1?)*G(n1?) = PR(n1);
    id G(n1?)*PL(n1?) = PL(n1);
    id G(n1?)*PR(n1?) = PR(n1);

    id G(n1?,p1?)*G(n1?,p1?) = p1.p1*G(n1);
    id G(n1?,v1?)*G(n1?,v1?) = d*G(n1);
    repeat id G(n1?)*G(n1?,v1?) = G(n1,v1)*G(n1);
    repeat id G(n1?)*G(n1?) = G(n1);
    id G(n1?,v1?)*G(n1?) = G(n1,v1);
    id PL(n1?)*G(n1?) = PL(n1);
    id PR(n1?)*G(n1?) = PR(n1);
    id G(n1?)*PL(n1?) = PL(n1);
    id G(n1?)*PR(n1?) = PR(n1);
    
    #call collectSC;

    b SCC;
    .sort
    Keep Brackets;
*   apply triple contraction identities
    id SCC(n1?, ?args1, G(n1?,v1?), G(n1?,v2?), G(n1?,v3?), PL(n1?), ?args2)*
       SCC(n2?, ?args3, G(n2?,v1?), G(n2?,v2?), G(n2?,v3?), PL(n2?), ?args4) =
          16*SCC(n1, ?args1, G(n1,v1), PL(n1), ?args2)*
             SCC(n2, ?args3, G(n2,v1), PL(n2), ?args4);

    id SCC(n1?, ?args1, G(n1?,v1?), G(n1?,v2?), G(n1?,v3?), PR(n1?), ?args2)*
       SCC(n2?, ?args3, G(n2?,v1?), G(n2?,v2?), G(n2?,v3?), PR(n2?), ?args4) =
          16*SCC(n1, ?args1, G(n1,v1), PR(n1), ?args2)*
             SCC(n2, ?args3, G(n2,v1), PR(n2), ?args4);

    id SCC(n1?, ?args1, G(n1?,v1?), G(n1?,v2?), G(n1?,v3?), PL(n1?), ?args2)*
       SCC(n2?, ?args3, G(n2?,v1?), G(n2?,v2?), G(n2?,v3?), PR(n2?), ?args4) =
           4*SCC(n1, ?args1, G(n1,v1), PL(n1), ?args2)*
             SCC(n2, ?args3, G(n2,v1), PR(n2), ?args4);

*   apply double contraction identities
    id SCC(n1?, ?args1, G(n1?,v1?), G(n1?,v2?), G(n1?,v3?), PL(n1?), ?args2)*
       SCC(n2?, ?args3, G(n2?,v4?), G(n2?,v2?), G(n2?,v3?), PL(n2?), ?args4) =
           4*d_(v1,v4)*SCC(n1, ?args1, G(n1,v2), PL(n1), ?args2)*
                       SCC(n2, ?args3, G(n2,v2), PL(n2), ?args4);

    id SCC(n1?, ?args1, G(n1?,v1?), G(n1?,v2?), G(n1?,v3?), PR(n1?), ?args2)*
       SCC(n2?, ?args3, G(n2?,v4?), G(n2?,v2?), G(n2?,v3?), PR(n2?), ?args4) =
           4*d_(v1,v4)*SCC(n1, ?args1, G(n1,v2), PR(n1), ?args2)*
                       SCC(n2, ?args3, G(n2,v2), PR(n2), ?args4);

    id SCC(n1?, ?args1, G(n1?,v1?), G(n1?,v2?), G(n1?,v3?), PL(n1?), ?args2)*
       SCC(n2?, ?args3, G(n2?,v4?), G(n2?,v2?), G(n2?,v3?), PR(n2?), ?args4) =
           4*SCC(n1, ?args1, G(n1,v1), PL(n1), ?args2)*
             SCC(n2, ?args3, G(n2,v4), PR(n2), ?args4);

    id SCC(n1?, ?args1, G(n1?,v1?), G(n1?,v2?), G(n1?,v3?), PR(n1?), ?args2)*
       SCC(n2?, ?args3, G(n2?,v4?), G(n2?,v2?), G(n2?,v3?), PL(n2?), ?args4) =
           4*SCC(n1, ?args1, G(n1,v1), PR(n1), ?args2)*
             SCC(n2, ?args3, G(n2,v4), PL(n2), ?args4);

*   apply single contraction identities (only when swapping momentum
*   makes sense)
***** momentum in middle position
    id SCC(n4?, QQ(n1?,k1?,?args1),?args5,  G(n4?,v1?), PR(n4?), ?args2)*
       SCC(n5?, QQ(n2?,k2?,?args4),?args6,  G(n5?, v2?), G(n5?, k1?), G(n5?,v1?), PL(n5?), ?args3)
     =  SCC(n4, QQ(n1,k1,?args1),  ?args5,  G(n4,v1), G(n4,v2), G(n4,k1), PR(n4), ?args2)*
        SCC(n5, QQ(n2,k2,?args4),  ?args6,  G(n5,v1), PL(n5), ?args3);

    id SCC(n4?,QQ(n1?,k1?,?args1), ?args5,  G(n4?,v1?), PL(n4?), ?args2)*
       SCC(n5?,QQ(n2?,k2?,?args4), ?args6,  G(n5?, v2?), G(n5?, k1?), G(n5?,v1?), PR(n5?), ?args3)
     = SCC(n4, QQ(n1,k1,?args1),   ?args5,  G(n4,v1), G(n4,v2), G(n4,k1), PL(n4), ?args2)*
        SCC(n5,QQ(n2,k2,?args4),   ?args6,  G(n5,v1), PR(n5), ?args3);

    id SCC(n4?, QQ(n1?,k1?,?args1),?args5,  G(n4?,v1?), PL(n4?), ?args2)*
        SCC(n5?,QQ(n2?,k2?,?args4),?args6,  G(n5?, v2?), G(n5?, k1?), G(n5?,v1?), PL(n5?), ?args3)
     = SCC(n4,  QQ(n1,k1,?args1),  ?args5,  G(n4,k1), G(n4,v2), G(n4,v1), PL(n4), ?args2)*
        SCC(n5, QQ(n2,k2,?args4),  ?args6,  G(n5,v1), PL(n5), ?args3);

    id SCC(n4?, QQ(n1?,k1?,?args1),?args5,  G(n4?,v1?), PR(n4?), ?args2)*
        SCC(n5?,QQ(n2?,k2?,?args4),?args6,  G(n5?, v2?), G(n5?, k1?), G(n5?,v1?), PR(n5?), ?args3)
     = SCC(n4,  QQ(n1,k1,?args1),  ?args5,  G(n4,k1), G(n4,v2), G(n4,v1), PR(n4), ?args2)*
        SCC(n5, QQ(n2,k2,?args4),  ?args6,  G(n5,v1), PR(n5), ?args3);


    id SCC(n4?, ?args2, G(n4?,v1?), PR(n4?), QQ(n1?,k1?,?args1))*
       SCC(n5?, ?args3, G(n5?, v2?), G(n5?, k1?), G(n5?,v1?), PL(n5?),QQ(n2?,k2?,?args4))
     =  SCC(n4, ?args2, G(n4,v1), G(n4,v2), G(n4,k1), PR(n4), QQ(n1,k1,?args1))*
        SCC(n5, ?args3, G(n5,v1), PL(n5),QQ(n2,k2,?args4) );

    id SCC(n4?, ?args2, G(n4?,v1?), PL(n4?), QQ(n1?,k1?,?args1))*
       SCC(n5?, ?args3, G(n5?, v2?), G(n5?, k1?), G(n5?,v1?), PR(n5?),QQ(n2?,k2?,?args4) )
     = SCC(n4,  ?args2, G(n4,v1), G(n4,v2), G(n4,k1), PL(n4),QQ(n1,k1,?args1) )*
        SCC(n5, ?args3, G(n5,v1), PR(n5),QQ(n2,k2,?args4) );

    id SCC(n4?, ?args2, G(n4?,v1?), PL(n4?),QQ(n1?,k1?,?args1) )*
        SCC(n5?,?args3, G(n5?, v2?), G(n5?, k1?), G(n5?,v1?), PL(n5?), QQ(n2?,k2?,?args4))
     = SCC(n4,  ?args2, G(n4,k1), G(n4,v2), G(n4,v1), PL(n4),QQ(n1,k1,?args1) )*
        SCC(n5, ?args3, G(n5,v1), PL(n5),QQ(n2,k2,?args4));

    id SCC(n4?, ?args2, G(n4?,v1?), PR(n4?),QQ(n1?,k1?,?args1) )*
        SCC(n5?,?args3, G(n5?, v2?), G(n5?, k1?), G(n5?,v1?), PR(n5?), QQ(n2?,k2?,?args4))
     = SCC(n4,  ?args2, G(n4,k1), G(n4,v2), G(n4,v1), PR(n4),QQ(n1,k1,?args1) )*
        SCC(n5, ?args3, G(n5,v1), PR(n5), QQ(n2,k2,?args4));


***** momentum in first position
    id SCC(n4?, QQ(n1?,k1?,?args1),?args5,  G(n4?,v1?), PR(n4?), ?args2)*
       SCC(n5?, QQ(n2?,k2?,?args4),?args6,  G(n5?, k1?), G(n5?, v2?), G(n5?,v1?), PL(n5?), ?args3)
     =  SCC(n4, QQ(n1,k1,?args1),  ?args5,  G(n4,v1), G(n4,k1), G(n4,v2), PR(n4), ?args2)*
        SCC(n5, QQ(n2,k2,?args4),  ?args6,  G(n5,v1), PL(n5), ?args3);

    id SCC(n4?,QQ(n1?,k1?,?args1), ?args5,  G(n4?,v1?), PL(n4?), ?args2)*
       SCC(n5?,QQ(n2?,k2?,?args4), ?args6,  G(n5?, k1?), G(n5?, v2?), G(n5?,v1?), PR(n5?), ?args3)
     = SCC(n4, QQ(n1,k1,?args1),   ?args5,  G(n4,v1), G(n4,k1), G(n4,v2), PL(n4), ?args2)*
        SCC(n5,QQ(n2,k2,?args4),   ?args6,  G(n5,v1), PR(n5), ?args3);

    id SCC(n4?, QQ(n1?,k1?,?args1),?args5,  G(n4?,v1?), PL(n4?), ?args2)*
        SCC(n5?,QQ(n2?,k2?,?args4),?args6,  G(n5?, k1?), G(n5?, v2?), G(n5?,v1?), PL(n5?), ?args3)
     = SCC(n4,  QQ(n1,k1,?args1),  ?args5,  G(n4,v2), G(n4,k1), G(n4,v1), PL(n4), ?args2)*
        SCC(n5, QQ(n2,k2,?args4),  ?args6,  G(n5,v1), PL(n5), ?args3);

    id SCC(n4?, QQ(n1?,k1?,?args1),?args5,  G(n4?,v1?), PR(n4?), ?args2)*
        SCC(n5?,QQ(n2?,k2?,?args4),?args6,  G(n5?, k1?), G(n5?, v2?), G(n5?,v1?), PR(n5?), ?args3)
     = SCC(n4,  QQ(n1,k1,?args1),  ?args5,  G(n4,v2), G(n4,k1), G(n4,v1), PR(n4), ?args2)*
        SCC(n5, QQ(n2,k2,?args4),  ?args6,  G(n5,v1), PR(n5), ?args3);


    id SCC(n4?, ?args2, G(n4?,v1?), PR(n4?), QQ(n1?,k1?,?args1))*
       SCC(n5?, ?args3, G(n5?, k1?), G(n5?, v2?), G(n5?,v1?), PL(n5?),QQ(n2?,k2?,?args4))
     =  SCC(n4, ?args2, G(n4,v1), G(n4,k1), G(n4,v2), PR(n4), QQ(n1,k1,?args1))*
        SCC(n5, ?args3, G(n5,v1), PL(n5),QQ(n2,k2,?args4) );

    id SCC(n4?, ?args2, G(n4?,v1?), PL(n4?), QQ(n1?,k1?,?args1))*
       SCC(n5?, ?args3, G(n5?, k1?), G(n5?, v2?), G(n5?,v1?), PR(n5?),QQ(n2?,k2?,?args4) )
     = SCC(n4,  ?args2, G(n4,v1), G(n4,k1), G(n4,v2), PL(n4),QQ(n1,k1,?args1) )*
        SCC(n5, ?args3, G(n5,v1), PR(n5),QQ(n2,k2,?args4) );

    id SCC(n4?, ?args2, G(n4?,v1?), PL(n4?),QQ(n1?,k1?,?args1) )*
        SCC(n5?,?args3, G(n5?, k1?), G(n5?, v2?), G(n5?,v1?), PL(n5?), QQ(n2?,k2?,?args4))
     = SCC(n4,  ?args2, G(n4,v2), G(n4,k1), G(n4,v1), PL(n4),QQ(n1,k1,?args1) )*
        SCC(n5, ?args3, G(n5,v1), PL(n5),QQ(n2,k2,?args4));

    id SCC(n4?, ?args2, G(n4?,v1?), PR(n4?),QQ(n1?,k1?,?args1) )*
        SCC(n5?,?args3, G(n5?, k1?), G(n5?, v2?), G(n5?,v1?), PR(n5?), QQ(n2?,k2?,?args4))
     = SCC(n4,  ?args2, G(n4,v2), G(n4,k1), G(n4,v1), PR(n4),QQ(n1,k1,?args1) )*
        SCC(n5, ?args3, G(n5,v1), PR(n5), QQ(n2,k2,?args4));


    b SCC;
    .sort
    Keep Brackets;
    id SCC(?args) = SC(?args);

    b SC;
    .sort
    Keep Brackets;
    repeat id once SC(n1?,n2?,?args) = n2*SC(n1,?args);
    
    id SC(n1?) = 1;
    b QQ;
    .sort
    Keep Brackets;
    id QQ(?args, l) = QQ(?args);
    id QQ(?args, r) = QQ(?args);
    .sort

    id PL(n1?) = 1/2*(G(n1) - G5(n1));
    id PR(n1?) = 1/2*(G(n1) + G5(n1));
    id G(n1?)*G(n1?,v1?) = G(n1,v1);
    id G(n1?)*G5(n1?) = G5(n1);
    id G(n1?,v1?)*G(n1?) = G(n1,v1);
    id G5(n1?)*G(n1?) = G5(n1);

#enddo
#endprocedure
